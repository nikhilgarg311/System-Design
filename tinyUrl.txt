Design a URL Shortener

A URL shortener is a service that takes a long URL and returns a shorter, unique alias that redirects to the original URL.


Step1: Requirements Gathering

    (1) Functional Requirements:
        - Generate a unique short URL for a given long URL(write operation).
        - Redirect the user to the original URL when the short URL is accessed(read operation).
        - Provide expiry for Url.
    (2) Non-Functional Requirements:
        - High availability (the service should be up 99.9% of the time).
        - Low latency (url shortening and redirects should happen in milliseconds).
        - Scalability (the system should handle millions of requests per day).
        - Durability (shortened URLs should work for years).
        - Security to prevent malicious use, such as phishing.

Step2: Storage/Capacity Estimations:
    
    Lets suppose 
    - The Url has to be stored for 1 year,
    - Daily active users are 1M,
    - 9:1 Read Write ratio,
    - Avg length of original url be 100 char,

    Total read requests per day= 90% of 1M
    Total write requests per day= 10% of 1M

    total request per second= 1M/(86400s) approximately 12 for easy calculations lets say 10,
    total read per second = 9
    total write per second= 1

    storage for one long url = 100 bytes
    storage for one short url= 7 bytes
    expiry date= 8 bytes

    total 115 bytes for one url
    for easy calculations lets say 100 bytes

    total write req/day= 100K
    total storage per day= 100K 100bytes = 10MB/day
    for one year total storage reqd will be 3650MB = 3.650GB

    Since its a read heavy operation caching will help reduce latency
    let say only 20% of the urls need to be cached, so 20% of daily storage= 2MB cache size

Step3: Database Design

we will use simple RDBMS database for start, and deep dive into other options later

    we will have the following fields
        short url
        long url
        expiry
        custId

Step4: High Level Design

On a high level, we would need following components in our design:


users -----> load balancer-------->server-------------->Url Generation Service/ Url Redirection Service---------->database----------->cache


Load Balancer: Distributes incoming requests across multiple application servers.

Application Servers: Handles incoming requests for shortening URLs and redirecting users.

URL Generation Service: Generates short URLs, handles custom aliases, and manages link expirations.

Redirection Service: Redirects the users to the original URL.

Database: Stores mappings between short URLs and long URLs.

Cache: Stores frequently accessed URL mappings for faster retrieval.

Analytics Service (optional): Tracks usage statistics like the number of clicks, geographic location, etc.


Step5: Api Design

    we will need two API's
    (1) Short Url Generator (Post)
    (2) Redirection (Get)


Step6: Deep dive into concepts in details
Step7: Addressing key issues and bottlenecks




